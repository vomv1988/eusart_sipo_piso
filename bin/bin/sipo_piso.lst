gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 2-23-2013  17:31:36
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           	include		<coff.inc>
                                             list
                                           ; coff.inc - gputils header file
                                             nolist
                                           	include		<config.inc>
                                           ;; gputils_make_example, Copyright 2013 Vicente Oscar Mier Vela <vomv1988@gmail.com>
                                           ;;    This file is part of gputils_make_example.
                                           ;;
                                           ;;    gputils_make_example is free software: you can redistribute it and/or modify
                                           ;;    it under the terms of the GNU General Public License as published by
                                           ;;    the Free Software Foundation, either version 3 of the License, or
                                           ;;    (at your option) any later version.
                                           ;;
                                           ;;    gputils_make_example is distributed in the hope that it will be useful,
                                           ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ;;    GNU General Public License for more details.
                                           ;;
                                           ;;    You should have received a copy of the GNU General Public License
                                           ;;    along with gputils_make_example.  If not, see <http://www.gnu.org/licenses/>.
                                           	__CONFIG ( _FCMEN_OFF & _IESO_OFF & _BOR_OFF & _CPD_OFF & _CP_OFF & _MCLRE_OFF & _PWRTE_OFF & _WDT_OFF & _INTRC_OSC_NOCLKOUT )
                                           	include		<signals.inc>
                                           ;; gputils_make_example, Copyright 2013 Vicente Oscar Mier Vela <vomv1988@gmail.com>
                                           ;;    This file is part of gputils_make_example.
                                           ;;
                                           ;;    gputils_make_example is free software: you can redistribute it and/or modify
                                           ;;    it under the terms of the GNU General Public License as published by
                                           ;;    the Free Software Foundation, either version 3 of the License, or
                                           ;;    (at your option) any later version.
                                           ;;
                                           ;;    gputils_make_example is distributed in the hope that it will be useful,
                                           ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ;;    GNU General Public License for more details.
                                           ;;
                                           ;;    You should have received a copy of the GNU General Public License
                                           ;;    along with gputils_make_example.  If not, see <http://www.gnu.org/licenses/>.
                                           	variable	h
                                           h=0
                                           	while	h < 6
                                           S#v(h)	equ	~h
                                           h += 1
                                           	endw
                                           
                                           	extern		set_ports
                                           	extern		greet
                                           	extern		mv_rx_w
                                           	extern		mv_w_tx
                                           	extern		sipo
                                           	extern		piso
                                           	extern		loopback_sipo
                                           	extern		loopback_piso
                                           
                                           start	code		H'0000'
000000   2039     call	0x39                	call		set_ports
000001   2881     goto	0x81                	goto		main
                                           
                                           prog	code
                                           main:
000081   2002     call	0x2                 	call		greet
                                           aa:
000082   2882     goto	0x82                	goto		aa
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	extern		mv_rx_w
                                           	extern		mv_w_tx
                                           
                                           	global		greet
                                           
                                           	udata
                                           FLAGS	res		1
                                           GSIG	res		1
                                           
                                           libsp	code
                                           greet:
                                           ;;	Signals:
                                           ;;	Byte	Signal			Function
                                           ;;	.7	Interface-distress	Send to Control, expect Control-response
                                           ;;	.8	Control-response	Send to Interface after receiving Interface-distress
                                           ;;					and expect Interface-confirm
                                           ;;	.9	Interface-confirm	Send to Control after receiving Control-response
                                           ;;	.10	Control-distress	Send to Interface, expect Interface-response
                                           ;;	.11	Interface-response	Send to Control after receiving Control-distress
                                           ;;					and expect Control-confirm
                                           ;;	.12	Control-confirm		Send to Interface after receiving Interface-response
                                           
                                           ;;	Flags:
                                           ;;	(All flags are set by default)
                                           ;;	Bit	Flag			Function
                                           ;;	0	C_DISTRESS_PENDING	Interface is expecting Control-distress.
                                           ;;					Therefor: C_DISTRESS_PENDING = 1
                                           ;;					When Control-distress is received, this is unset.
                                           ;;	1	C_RESPONSE_PENDING	Interface-distress was sent AND received by Control,
                                           ;;					Interface is now expecting a Control-response signal
                                           ;;					Therefor: C_RESPONSE_PENDING = 1
                                           ;;					When Control-response is received, this is unset.
                                           ;;	2	C_CONFIRM_PENDING	Control-distress was received and responded by
                                           ;;					Interface with an Interface-response. Interface
                                           ;;					is therefor expecting a Control-confirm.
                                           ;;					Therefor: C_CONFIRM_PENDING = 1
                                           ;;					When Control-confirm is received, this is unset.
                                           ;;	3	ITX_IRX			Interface-distress was sent and Control-response
                                           ;;					was received in exchange. Interface-confirm will be
                                           ;;					sent to Control.
                                           ;;					Therefor: ITX_IRX = 0
                                           ;;					Otherwise, this is set.
                                           ;;	4	CTX_CRX			Control-distress was received and responded with
                                           ;;					Interface-response by Interface. Then, Control
                                           ;;					sent Control-confirm and Interface received this.
                                           ;;					Therefor: CTX_CRX = 0
                                           ;;					Otherwise, this is set.
                                           
                                           ;;	It can be said that ITX_IRX=0 only when C_RESPONSE_PENDING is 0, and
                                           ;;	CTX_CRX=0 only when C_DISTRESS_PENDING = C_CONFIRM_PENDING = 0
                                           
                                           ;;	Set flags
000002   1283     bcf	0x3, 0x5             	banksel		FLAGS
000003   1303     bcf	0x3, 0x6             
000004   301f     movlw	0x1f               	movlw		B'00011111'
000005   1283     bcf	0x3, 0x5             	banksel		FLAGS
000006   1303     bcf	0x3, 0x6             
000007   00a0     movwf	0x20               	movwf		FLAGS
                                           
                                           ;;	Break loop
                                           break:
000008   1283     bcf	0x3, 0x5             	banksel		FLAGS
000009   1303     bcf	0x3, 0x6             
00000a   0820     movf	0x20, w             	movfw		FLAGS
00000b   3a00     xorlw	0                  	xorlw		.0
00000c   1903     btfsc	0x3, 0x2           	skpnz
00000d   2838     goto	0x38                	goto		finish
                                           
                                           ;;	Transmission
                                           transmit:
00000e   1283     bcf	0x3, 0x5             	banksel		FLAGS
00000f   1303     bcf	0x3, 0x6             
000010   1ca0     btfss	0x20, 0x1          	btfss		FLAGS,1
000011   2815     goto	0x15                	goto		else1
                                           ;;
                                           ;;	if C_RESPONSE_PENDING (FLAGS,1) == 1 ; then
                                           ;;
000012   3007     movlw	0x7                	movlw		.7		;;	<< Send Interface-distress
000013   2053     call	0x53                	call		mv_w_tx
                                           	.direct		"c","Control.rx"
000014   2817     goto	0x17                	goto		fi1
                                           ;;
                                           ;;	else
                                           ;;
                                           else1:
000015   3009     movlw	0x9                	movlw		.9		;;	<< Send Interface-confirm
000016   2053     call	0x53                	call		mv_w_tx
                                           	.direct		"c","Control.rx"
                                           ;;
                                           ;;	fi
                                           ;;
                                           fi1:
                                           
000017   1283     bcf	0x3, 0x5             	banksel		FLAGS
000018   1303     bcf	0x3, 0x6             
000019   0820     movf	0x20, w             	movfw		FLAGS
00001a   3905     andlw	0x5                	andlw		B'00000101'
00001b   3a04     xorlw	0x4                	xorlw		B'00000100'
00001c   1d03     btfss	0x3, 0x2           	skpz
00001d   2820     goto	0x20                	goto		fi2
                                           ;;
                                           ;;	if C_DISTRESS_PENDING (FLAGS,0) == 0 && C_CONFIRM_PENDING (FLAGS,2) == 1 ; then
                                           ;;
00001e   300b     movlw	0xb                	movlw		.11		;;	<< Send Interface-response
00001f   2053     call	0x53                	call		mv_w_tx
                                           	.direct		"c","Control.rx"
                                           ;;
                                           ;;	fi
                                           ;;
                                           fi2:
                                           
                                           ;;	Sample RX byte
                                           sample:
                                           	.direct		"c","Control.tx=8"
000020   1283     bcf	0x3, 0x5             	banksel		PIR1
000021   1303     bcf	0x3, 0x6             
000022   1e8c     btfss	0xc, 0x5           	btfss		PIR1,5
000023   2808     goto	0x8                 	goto		break
                                           
                                           ;;	Reception
                                           receive:
000024   204b     call	0x4b                	call		mv_rx_w
000025   1283     bcf	0x3, 0x5             	banksel		GSIG
000026   1303     bcf	0x3, 0x6             
000027   00a1     movwf	0x21               	movwf		GSIG
000028   3a0a     xorlw	0xa                	xorlw		.10
000029   1903     btfsc	0x3, 0x2           	skpnz
                                           ;;
                                           ;;	if SIGNAL == Control-distress ; then
                                           ;;
                                           	.direct		"c","Control.tx"
00002a   1020     bcf	0x20, 0              	bcf		FLAGS,0		;;	<< Clear C_DISTRESS_PENDING
                                           ;;
                                           ;;	fi
                                           ;;
                                           
00002b   0821     movf	0x21, w             	movfw		GSIG
00002c   3a08     xorlw	0x8                	xorlw		.8
00002d   1d03     btfss	0x3, 0x2           	skpz
00002e   2831     goto	0x31                	goto		fi3
                                           ;;
                                           ;;	if SIGNAL == Control-response ; then
                                           ;;
00002f   10a0     bcf	0x20, 0x1            	bcf		FLAGS,1		;;	<< Clear C_RESPONSE_PENDING
000030   11a0     bcf	0x20, 0x3            	bcf		FLAGS,3		;;	<< Clear ITX_IRX
                                           ;;
                                           ;;	fi
                                           ;;
                                           fi3:
                                           
000031   0821     movf	0x21, w             	movfw		GSIG
000032   3a0c     xorlw	0xc                	xorlw		.12
000033   1d03     btfss	0x3, 0x2           	skpz
000034   2837     goto	0x37                	goto		fi4
                                           ;;
                                           ;;	if SIGNAL == Control-confirm ; then
                                           ;;
000035   1120     bcf	0x20, 0x2            	bcf		FLAGS,2		;;	<< Clear C_CONFIRM_PENDING
000036   1220     bcf	0x20, 0x4            	bcf		FLAGS,4		;;	<< Clear CTX_CRX
                                           ;;
                                           ;;	fi
                                           ;;
                                           fi4:
                                           
000037   2808     goto	0x8                 	goto		break
                                           finish:
000038   0008     return                   	return
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	global		set_ports
                                           
                                           	extern		set_anselh_ansel
                                           	extern		set_pinout_tris
                                           	extern		set_eusart_19200
                                           
                                           libsp	code
                                           set_ports:
000039   205b     call	0x5b                	call		set_anselh_ansel	;;	<< Initial pinout / EUSART settings
00003a   203d     call	0x3d                	call		set_pinout_tris		;;	<<
00003b   2062     call	0x62                	call		set_eusart_19200	;;	<<
00003c   0008     return                   	return
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	global		set_pinout_tris
                                           
                                           libsp	code
                                           set_pinout_tris:
00003d   1683     bsf	0x3, 0x5             	banksel		TRISA		;;	<< These settings provide the following
00003e   1303     bcf	0x3, 0x6             
00003f   3009     movlw	0x9                	movlw		B'00001001'	;;	<< configuration for the physical terminals
000040   0085     movwf	0x5                	movwf		TRISA		;;	<< of the PIC16F690:
000041   3020     movlw	0x20               	movlw		B'00100000'	;;	<<
000042   0086     movwf	0x6                	movwf		TRISB		;;	<< PORT	PIN	I/O	NAME	FUNCTION
000043   3000     movlw	0                  	movlw		B'00000000'	;;	<< RA3	4	I	DISIPO	Ser data in
000044   0087     movwf	0x7                	movwf		TRISC		;;	<< RA5	2	O	DOSIPO	Ser data out
000045   1283     bcf	0x3, 0x5             	banksel		PORTA		;;	   RA4	3	O	CKSIPO	Clock out
000046   1303     bcf	0x3, 0x6             
000047   0185     clrf	0x5                 	clrf		PORTA		;;	   RC5	5	O	LDSIPO	Load D out
000048   0186     clrf	0x6                 	clrf		PORTB		;;	   RC4	6	O	CRSIPO	Clear out
000049   0187     clrf	0x7                 	clrf		PORTC		;;	   RA0	19	I	DIPISO	Ser data in
                                           					;;	   RA1	18	O	DOPISO	Ser data out
                                           					;;	   RA2	17	O	CKPISO	Clock out
                                           					;;	   RC0	16	O	LD1PISO	Load D1 out
                                           					;;	   RC2	14	O	LD2PISO	Load D2 out
                                           					;;	   RC1	15	O	CRPISO	Clear out
                                           					;;	   RB5	12	I	RX	RX in
                                           					;;	   RB7	10	O	TX	TX out
00004a   0008     return                   	return
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	global		mv_rx_w
                                           
                                           libsp	code
                                           mv_rx_w:
00004b   1283     bcf	0x3, 0x5             	banksel		PIR1		;;	<< Pause execution until a whole byte
00004c   1303     bcf	0x3, 0x6             
00004d   1e8c     btfss	0xc, 0x5           	btfss		PIR1,5		;;	<< has been received and stored in register
00004e   284d     goto	0x4d                	goto		$-1		;;	<< RCREG via RX (RB5, pin 12)
                                           
00004f   1283     bcf	0x3, 0x5             	banksel		RCREG		;;	<< Store the contents of RCREG in WREG.
000050   1303     bcf	0x3, 0x6             
000051   081a     movf	0x1a, w             	movfw		RCREG		;;	<<
000052   0008     return                   	return
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	global		mv_w_tx
                                           
                                           libsp	code
                                           mv_w_tx:
000053   1283     bcf	0x3, 0x5             	banksel		TXREG		;;	<< Move the contents of WREG to TXREG
000054   1303     bcf	0x3, 0x6             
000055   0099     movwf	0x19               	movwf		TXREG		;;	<<
                                           
000056   1683     bsf	0x3, 0x5             	banksel		TXSTA		;;	<< Pause execution until TRMT (TXSTA,1)
000057   1303     bcf	0x3, 0x6             
000058   1c98     btfss	0x18, 0x1          	btfss		TXSTA,1		;;	<< is set again. i.e. until the byte
000059   2858     goto	0x58                	goto		$-1		;;	<< transmission completes
00005a   0008     return                   	return
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	global		set_anselh_ansel
                                           
                                           libsp	code
                                           set_anselh_ansel:
00005b   1283     bcf	0x3, 0x5             	banksel		ANSEL		;;	<< ANSELH:ANSEL Settings
00005c   1703     bsf	0x3, 0x6             
00005d   019e     clrf	0x1e                	clrf		ANSEL		;;	<<
00005e   1283     bcf	0x3, 0x5             	banksel		ANSELH		;;	<<
00005f   1703     bsf	0x3, 0x6             
000060   019f     clrf	0x1f                	clrf		ANSELH		;;	<<
000061   0008     return                   	return
                                           	end
                                           	processor	pic16f690
                                           	include		<p16f690.inc>
                                                   LIST
                                           ; P16F690.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           
                                           	global		set_eusart_19200
                                           
                                           libsp	code
                                           set_eusart_19200:
000062   1283     bcf	0x3, 0x5             	banksel		INTCON		;;	<< These settings configure interrupt
000063   1303     bcf	0x3, 0x6             
000064   138b     bcf	0xb, 0x7             	bcf		INTCON,7	;;	<< functions for the PIC16F690 EUSART.
000065   130b     bcf	0xb, 0x6             	bcf		INTCON,6	;;	<<
000066   1683     bsf	0x3, 0x5             	banksel		PIE1		;;	<<
000067   1303     bcf	0x3, 0x6             
000068   128c     bcf	0xc, 0x5             	bcf		PIE1,5		;;	<<
                                           
000069   1683     bsf	0x3, 0x5             	banksel		SPBRGH		;;	<< These settings assign the following
00006a   1303     bcf	0x3, 0x6             
00006b   019a     clrf	0x1a                	clrf		SPBRGH		;;	<< values to the PIC16F690 EUSART:
00006c   1683     bsf	0x3, 0x5             	banksel		SPBRG		;;	<<
00006d   1303     bcf	0x3, 0x6             
00006e   300c     movlw	0xc                	movlw		D'12'		;;	<< FOSC		= 4 MHz
00006f   0099     movwf	0x19               	movwf		SPBRG		;;	<< SYNC		= 0
000070   1683     bsf	0x3, 0x5             	banksel		BAUDCTL		;;	<< BRGH		= 1
000071   1303     bcf	0x3, 0x6             
000072   119b     bcf	0x1b, 0x3            	bcf		BAUDCTL,3	;;	<< BRG16	= 0
000073   1683     bsf	0x3, 0x5             	banksel		TXSTA		;;	<< SPBRGH:SPBRG	= 12
000074   1303     bcf	0x3, 0x6             
000075   1518     bsf	0x18, 0x2            	bsf		TXSTA,2		;;	<< BR           = 19200
000076   1218     bcf	0x18, 0x4            	bcf		TXSTA,4		;;	<< ACTBR        = 19.23 k
000077   1198     bcf	0x18, 0x3            	bcf		TXSTA,3		;;	<< ERROR        = 0.16 %
000078   1698     bsf	0x18, 0x5            	bsf		TXSTA,5		;;	<<
000079   1318     bcf	0x18, 0x6            	bcf		TXSTA,6		;;	<<
00007a   1283     bcf	0x3, 0x5             	banksel		RCSTA		;;	<<
00007b   1303     bcf	0x3, 0x6             
00007c   1198     bcf	0x18, 0x3            	bcf		RCSTA,3		;;	<<
00007d   1618     bsf	0x18, 0x4            	bsf		RCSTA,4		;;	<<
00007e   1318     bcf	0x18, 0x6            	bcf		RCSTA,6		;;	<<
00007f   1798     bsf	0x18, 0x7            	bsf		RCSTA,7		;;	<<
000080   0008     return                   	return
                                           	end
